using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Misc;
using Peggley.Code.Scenes.Objects.UI.Interactable.Buttons.SceneSwap;
using Scenes.Objects;
using Scenes.Objects.UI.MainGame;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Scenes.SceneTypes
{
    internal class MainGameScene : Scene
    {
        public MainGameScene()
            : base(MainGameUICreator.GenerateSceneUIElements, "Main Game")
        {
            NonAutoGeneratedInitialization();

            OnSceneEnter();
        }

        protected override void NonAutoGeneratedInitialization()
        {
            // Scene swap button
            SceneSwapButton TEMPBUTTON = MainGameUICreator.GenerateSceneSwapButton(_sceneName);
            AddNewSwapButton(TEMPBUTTON, new(typeof(MainMenuScene)));



            // Add to scene
            foreach (SceneSwapButton s in _sceneSwapButtons)
            {
                _toAddNextFrame.Enqueue(s);
            }
        }

        public override void OnSceneEnter()
        {
            // DO NOT REMOVE
            // This will cause memory leaks if removed
            base.OnSceneEnter();
        }

        public override void OnSceneExit()
        {
            // DO NOT REMOVE
            // This will cause memory leaks if removed
            base.OnSceneExit();
        }


        public override void Update(GameTime gameTime)
        {
            base.GetInputs(gameTime); // Of course

            base.Update(gameTime);

            DoObjectRemoval();
        }

        static void DoObjectRemoval()
        {
            List<GameObject> removalObjects = ObjectManager._objects.Where(o => o._forDeletion).ToList();

            foreach (GameObject obj in removalObjects)
            {
                RemoveFromScene(obj);
            }

            if (removalObjects.Count > 100) // I don't think I've ever managed to have this condition get called lol
            {
                GC.Collect();
            }
        }

        public override void Render(ref SpriteBatch sb, GameWindow window)
        {
            base.Render(ref sb, window);
        }
    }


    public struct MainGameGenerationArgs
    {


        public MainGameGenerationArgs()
        {

        }
    }
}
